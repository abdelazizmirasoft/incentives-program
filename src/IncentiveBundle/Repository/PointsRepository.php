<?php

namespace IncentiveBundle\Repository;

use DateInterval;
use DateTime;
use IncentiveBundle\Entity\Type\PointTypeEnum;

/**
 * PointsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PointsRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param String $lastTimeFrame
     * @param int $boosterId
     * @return int
     */
    public function countBonusInTimeFrame(String $lastTimeFrame,int $boosterId): int
    {
        $result = $this->createQueryBuilder('point')
                        ->join('IncentiveBundle:Booster', 'booster')
                        ->andWhere('point.sourceType = :sourceType')
                        ->andWhere('point.source = :boosterId')
                        ->andWhere('point.source = booster.id')
                        ->andWhere('point.createdAt > :lastTimeFrame')
                        ->setParameter('sourceType', PointTypeEnum::BONUS)
                        ->setParameter('boosterId', $boosterId)
                        ->setParameter('lastTimeFrame', $lastTimeFrame)
                        ->select('count(point.id) as bonusPointCount')
                        ->getQuery()
                        ->getOneOrNullResult();
        return $result['bonusPointCount']??0;
    }

    /**
     * Count action in a dedicated time frame
     * @param String $lastTimeFrame
     * @param int $actionId
     * @return int
     */
    public function countActionInTimeFrame(String $lastTimeFrame,int $actionId): int
    {
        $result = $this->createQueryBuilder('point')
                        ->join('IncentiveBundle:Action', 'action')
                        ->andWhere('point.sourceType = :sourceType')
                        ->andWhere('point.source = :actionId')
                        ->andWhere('point.source = action.id')
                        ->andWhere('point.createdAt > :lastTimeFrame')
                        ->setParameter('sourceType', PointTypeEnum::ACTION)
                        ->setParameter('actionId', $actionId)
                        ->setParameter('lastTimeFrame', $lastTimeFrame)
                        ->select('count(point.id) as bonusPointCount')
                        ->getQuery()
                        ->getOneOrNullResult();
        return $result['bonusPointCount']??0;
    }

    /**
     * @param String $date
     * @param String $bonusValidityDays
     * @return int
     */
    public function sumBonusPoints(String $date,String $bonusValidityDays): int
    {
        $date = new DateTime($date);
        $givenDate= $date->format('Y-m-d 23:59:59');
        $n30date = $date->sub(DateInterval::createFromDateString($bonusValidityDays.' days'))->format('Y-m-d');
        $result = $this->createQueryBuilder('point')
                        ->join('IncentiveBundle:Booster', 'booster')
                        ->andWhere('point.sourceType = :sourceType')
                        ->andWhere('point.createdAt BETWEEN :n30days AND :givenDate')
                        ->andWhere('point.source = booster.id')
                        ->setParameter('sourceType', PointTypeEnum::BONUS)
                        ->setParameter('n30days', $n30date)
                        ->setParameter('givenDate', $givenDate)
                        ->select('SUM(booster.points) as bonusPoints')
                        ->getQuery()
                        ->getOneOrNullResult();
        return $result['bonusPoints']??0;
    }

    /**
     * String $date
     * @return int
     */
    public function sumActionPoints(String $date): int
    {
        $givenDate= (new DateTime($date))->format('Y-m-d 23:59:59');
        $result = $this->createQueryBuilder('point')
                    ->join('IncentiveBundle:Action', 'action')
                    ->andWhere('point.sourceType = :sourceType')
                    ->andWhere('point.source = action.id')
                    ->andWhere('point.createdAt <= :givenDate')
                    ->setParameter('sourceType', PointTypeEnum::ACTION)
                    ->setParameter('givenDate', $givenDate)
                    ->select('SUM(action.points) as actionPoints')
                    ->getQuery()
                    ->getOneOrNullResult();
        return $result['actionPoints']??0;
    }
}
